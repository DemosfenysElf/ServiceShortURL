// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: gRPC.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	"ServiceShortURL/internal/router"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceShortUrlClient is the client API for ServiceShortUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceShortUrlClient interface {
	GetShortURL(ctx context.Context, in *Long, opts ...grpc.CallOption) (*Short, error)
	GetLongURL(ctx context.Context, in *Short, opts ...grpc.CallOption) (*Long, error)
	GetBatchShort(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Batch, error)
}

type serviceShortUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceShortUrlClient(cc grpc.ClientConnInterface) ServiceShortUrlClient {
	return &serviceShortUrlClient{cc}
}

func (c *serviceShortUrlClient) GetShortURL(ctx context.Context, in *Long, opts ...grpc.CallOption) (*Short, error) {
	out := new(Short)
	err := c.cc.Invoke(ctx, "/ServiceShortUrl.ServiceShortUrl/GetShortURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceShortUrlClient) GetLongURL(ctx context.Context, in *Short, opts ...grpc.CallOption) (*Long, error) {
	out := new(Long)
	err := c.cc.Invoke(ctx, "/ServiceShortUrl.ServiceShortUrl/GetLongURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceShortUrlClient) GetBatchShort(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/ServiceShortUrl.ServiceShortUrl/GetBatchShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceShortUrlServer is the server API for ServiceShortUrl service.
// All implementations must embed UnimplementedServiceShortUrlServer
// for forward compatibility
type ServiceShortUrlServer interface {
	GetShortURL(context.Context, *Long) (*Short, error)
	GetLongURL(context.Context, *Short) (*Long, error)
	GetBatchShort(context.Context, *Batch) (*Batch, error)
	mustEmbedUnimplementedServiceShortUrlServer()
}

// UnimplementedServiceShortUrlServer must be embedded to have forward compatible implementations.
type UnimplementedServiceShortUrlServer struct {
}

func (UnimplementedServiceShortUrlServer) GetShortURL(context.Context, *Long) (*Short, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedServiceShortUrlServer) GetLongURL(context.Context, *Short) (*Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongURL not implemented")
}
func (UnimplementedServiceShortUrlServer) GetBatchShort(context.Context, *Batch) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchShort not implemented")
}
func (UnimplementedServiceShortUrlServer) mustEmbedUnimplementedServiceShortUrlServer() {}

// UnsafeServiceShortUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceShortUrlServer will
// result in compilation errors.
type UnsafeServiceShortUrlServer interface {
	mustEmbedUnimplementedServiceShortUrlServer()
}

func RegisterServiceShortUrlServer(s grpc.ServiceRegistrar, srv *router.ServerGRPC) {
	s.RegisterService(&ServiceShortUrl_ServiceDesc, srv)
}

func _ServiceShortUrl_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Long)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceShortUrlServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceShortUrl.ServiceShortUrl/GetShortURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceShortUrlServer).GetShortURL(ctx, req.(*Long))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceShortUrl_GetLongURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Short)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceShortUrlServer).GetLongURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceShortUrl.ServiceShortUrl/GetLongURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceShortUrlServer).GetLongURL(ctx, req.(*Short))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceShortUrl_GetBatchShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceShortUrlServer).GetBatchShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceShortUrl.ServiceShortUrl/GetBatchShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceShortUrlServer).GetBatchShort(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceShortUrl_ServiceDesc is the grpc.ServiceDesc for ServiceShortUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceShortUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceShortUrl.ServiceShortUrl",
	HandlerType: (*ServiceShortUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortURL",
			Handler:    _ServiceShortUrl_GetShortURL_Handler,
		},
		{
			MethodName: "GetLongURL",
			Handler:    _ServiceShortUrl_GetLongURL_Handler,
		},
		{
			MethodName: "GetBatchShort",
			Handler:    _ServiceShortUrl_GetBatchShort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC.proto",
}
